/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * PyInv API
 * Open Source Asset and Quartermaster System
 * OpenAPI spec version: 0.2.0-dev
 */
import { customInstance } from './axiosClient';
import type { BodyType } from './axiosClient';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;

export type NodesListNodeType = typeof NodesListNodeType[keyof typeof NodesListNodeType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NodesListNodeType = {
  A: 'A',
  L: 'L',
} as const;

export type NodesListParams = {
depth?: number;
/**
 * Descendent of
 */
descendent_of?: string;
/**
 * Is Container
 */
is_container?: boolean;
/**
 * Number of results to return per page.
 */
limit?: number;
name?: string;
node_type?: NodesListNodeType;
numchild?: number;
/**
 * The initial index from which to return the results.
 */
offset?: number;
/**
 * Which field to use when ordering the results.
 */
ordering?: string;
/**
 * Parent
 */
parent?: string;
/**
 * A search term.
 */
search?: string;
};

export type ManufacturersListParams = {
/**
 * Number of results to return per page.
 */
limit?: number;
/**
 * The initial index from which to return the results.
 */
offset?: number;
/**
 * Which field to use when ordering the results.
 */
ordering?: string;
/**
 * A search term.
 */
search?: string;
};

export type ChangesetsListParams = {
/**
 * Number of Events
 */
event_count_max?: number;
/**
 * Number of Events
 */
event_count_min?: number;
/**
 * Number of results to return per page.
 */
limit?: number;
/**
 * The initial index from which to return the results.
 */
offset?: number;
/**
 * Which field to use when ordering the results.
 */
ordering?: string;
/**
 * A search term.
 */
search?: string;
timestamp_after?: string;
timestamp_before?: string;
/**
 * User
 */
user?: number;
};

export type AssetsListParams = {
/**
 * Asset Code
 */
asset_code?: string;
/**
 * Asset Model
 */
asset_model?: string;
created_at_after?: string;
created_at_before?: string;
/**
 * Has Node
 */
has_node?: boolean;
/**
 * Is Container
 */
is_container?: boolean;
/**
 * Number of results to return per page.
 */
limit?: number;
/**
 * The initial index from which to return the results.
 */
offset?: number;
/**
 * Which field to use when ordering the results.
 */
ordering?: string;
/**
 * A search term.
 */
search?: string;
updated_at_after?: string;
updated_at_before?: string;
};

export type AssetModelsListParams = {
created_at_after?: string;
created_at_before?: string;
is_container?: boolean;
/**
 * Number of results to return per page.
 */
limit?: number;
/**
 * Manufacturer
 */
manufacturer?: string;
/**
 * The initial index from which to return the results.
 */
offset?: number;
/**
 * Which field to use when ordering the results.
 */
ordering?: string;
/**
 * A search term.
 */
search?: string;
updated_at_after?: string;
updated_at_before?: string;
};

export type AssetEventsListEventTypeItem = typeof AssetEventsListEventTypeItem[keyof typeof AssetEventsListEventTypeItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AssetEventsListEventTypeItem = {
  CR: 'CR',
  MV: 'MV',
} as const;

export type AssetEventsListParams = {
/**
 * Asset
 */
asset?: string;
/**
 * ChangeSet
 */
changeset?: string;
event_type?: AssetEventsListEventTypeItem[];
/**
 * Number of results to return per page.
 */
limit?: number;
/**
 * The initial index from which to return the results.
 */
offset?: number;
/**
 * Which field to use when ordering the results.
 */
ordering?: string;
/**
 * A search term.
 */
search?: string;
timestamp_after?: string;
timestamp_before?: string;
/**
 * User
 */
user?: number;
};

export interface UserLink {
  readonly username: string;
  readonly display_name: string;
}

export interface TokenVerify {
  token: string;
}

export interface TokenRefresh {
  readonly access: string;
  refresh: string;
}

export interface TokenObtainPair {
  username: string;
  password: string;
  readonly access: string;
  readonly refresh: string;
}

/**
 * Serializer for nodes.
 */
export interface PatchedNode {
  readonly id?: string;
  readonly display_name?: string;
  readonly node_type?: NodeTypeEnum;
  readonly numchild?: number;
  readonly is_container?: boolean;
  name?: string;
  readonly asset?: Asset;
  readonly depth?: number;
  readonly ancestors?: NodeLink[];
}

/**
 * Serializer with all information we have about a manufacturer.
 */
export interface PatchedManufacturer {
  name?: string;
  slug?: string | null;
  readonly created_at?: string;
  readonly updated_at?: string;
}

/**
 * Serializer for AssetModel objects.
 */
export interface PatchedAssetModel {
  name?: string;
  slug?: string | null;
  readonly display_name?: string;
  readonly manufacturer?: ManufacturerLink;
  manufacturer_slug?: string;
  is_container?: boolean;
  readonly asset_count?: number;
  readonly created_at?: string;
  readonly updated_at?: string;
}

export interface PaginatedNodeList {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: Node[];
}

export interface PaginatedManufacturerList {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: Manufacturer[];
}

export interface PaginatedAssetWithNodeList {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: AssetWithNode[];
}

export interface PaginatedAssetModelList {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: AssetModel[];
}

export interface PaginatedAssetEventWithAssetList {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: AssetEventWithAsset[];
}

export type NodeTypeEnum = typeof NodeTypeEnum[keyof typeof NodeTypeEnum];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NodeTypeEnum = {
  A: 'A',
  L: 'L',
} as const;

/**
 * Serializer with enough information to link to a node.
 */
export interface NodeLink {
  readonly id: string;
  readonly display_name: string;
  readonly node_type: NodeTypeEnum;
  readonly numchild: number;
  readonly is_container: boolean;
}

/**
 * Serializer with enough information to link to a node.
 */
export interface NodeLinkWithParent {
  readonly id: string;
  readonly display_name: string;
  readonly node_type: NodeTypeEnum;
  readonly numchild: number;
  readonly is_container: boolean;
  readonly parent: NodeLink;
}

/**
 * Serializer for nodes.
 */
export interface Node {
  readonly id: string;
  readonly display_name: string;
  readonly node_type: NodeTypeEnum;
  readonly numchild: number;
  readonly is_container: boolean;
  name: string;
  readonly asset: Asset;
  readonly depth: number;
  readonly ancestors: NodeLink[];
}

/**
 * Serializer with enough information to display a link to a manufacturer.
 */
export interface ManufacturerLink {
  name: string;
  slug?: string | null;
}

/**
 * Serializer with all information we have about a manufacturer.
 */
export interface Manufacturer {
  name: string;
  slug?: string | null;
  readonly created_at: string;
  readonly updated_at: string;
}

export type EventTypeEnum = typeof EventTypeEnum[keyof typeof EventTypeEnum];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventTypeEnum = {
  CR: 'CR',
  MV: 'MV',
} as const;

export interface ChangeSetSerializerWithCount {
  readonly id: string;
  readonly timestamp: string;
  readonly display_name: string;
  readonly user: UserLink;
  readonly comment: string;
  readonly event_count: number;
}

export interface PaginatedChangeSetSerializerWithCountList {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: ChangeSetSerializerWithCount[];
}

export interface ChangeSet {
  readonly id: string;
  readonly timestamp: string;
  readonly display_name: string;
  readonly user: UserLink;
  readonly comment: string;
}

export type AssetWithNodeExtraData = {[key: string]: unknown};

/**
 * Serializer with enough information to link to an asset model.
 */
export interface AssetModelLink {
  name: string;
  slug?: string | null;
}

/**
 * Serializer for Asset objects.
 */
export interface AssetWithNode {
  readonly id: string;
  readonly display_name: string;
  readonly asset_model: AssetModelLink;
  asset_codes: string[];
  readonly first_asset_code: string;
  readonly created_at: string;
  readonly updated_at: string;
  extra_data?: AssetWithNodeExtraData;
  readonly node: NodeLinkWithParent;
}

/**
 * Serializer for AssetModel objects.
 */
export interface AssetModel {
  name: string;
  slug?: string | null;
  readonly display_name: string;
  readonly manufacturer: ManufacturerLink;
  manufacturer_slug: string;
  is_container?: boolean;
  readonly asset_count: number;
  readonly created_at: string;
  readonly updated_at: string;
}

export interface AssetLink {
  readonly id: string;
  readonly display_name: string;
}

export type AssetEventWithAssetEventData = {[key: string]: unknown};

export interface AssetEventWithAsset {
  readonly id: string;
  readonly changeset: ChangeSet;
  readonly event_type: EventTypeEnum;
  readonly asset: AssetLink;
  readonly event_data: AssetEventWithAssetEventData;
}

export type AssetExtraData = {[key: string]: unknown};

/**
 * Serializer for Asset objects.
 */
export interface Asset {
  readonly id: string;
  readonly display_name: string;
  readonly asset_model: AssetModelLink;
  asset_codes: string[];
  readonly first_asset_code: string;
  readonly created_at: string;
  readonly updated_at: string;
  extra_data?: AssetExtraData;
}




// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;


  /**
 * Fetch or update the profile of the current user.
 */
export const accountsProfileRetrieve = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/api/v1/accounts/profile/`, method: 'get'
    },
      options);
    }
  
/**
 * Fetch or update the profile of the current user.
 */
export const accountsProfileUpdate = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/api/v1/accounts/profile/`, method: 'put'
    },
      options);
    }
  
/**
 * Fetch or update the profile of the current user.
 */
export const accountsProfilePartialUpdate = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/api/v1/accounts/profile/`, method: 'patch'
    },
      options);
    }
  
/**
 * Fetch information about asset events.
 */
export const assetEventsList = (
    params?: AssetEventsListParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PaginatedAssetEventWithAssetList>(
      {url: `/api/v1/asset-events/`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Fetch information about asset events.
 */
export const assetEventsRetrieve = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AssetEventWithAsset>(
      {url: `/api/v1/asset-events/${id}/`, method: 'get'
    },
      options);
    }
  
/**
 * Fetch information about asset models.
 */
export const assetModelsList = (
    params?: AssetModelsListParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PaginatedAssetModelList>(
      {url: `/api/v1/asset-models/`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Fetch information about asset models.
 */
export const assetModelsCreate = (
    assetModel: BodyType<NonReadonly<AssetModel>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AssetModel>(
      {url: `/api/v1/asset-models/`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: assetModel
    },
      options);
    }
  
/**
 * Fetch information about asset models.
 */
export const assetModelsRetrieve = (
    slug: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AssetModel>(
      {url: `/api/v1/asset-models/${slug}/`, method: 'get'
    },
      options);
    }
  
/**
 * Fetch information about asset models.
 */
export const assetModelsUpdate = (
    slug: string,
    assetModel: BodyType<NonReadonly<AssetModel>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AssetModel>(
      {url: `/api/v1/asset-models/${slug}/`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: assetModel
    },
      options);
    }
  
/**
 * Fetch information about asset models.
 */
export const assetModelsPartialUpdate = (
    slug: string,
    patchedAssetModel: BodyType<NonReadonly<PatchedAssetModel>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AssetModel>(
      {url: `/api/v1/asset-models/${slug}/`, method: 'patch',
      headers: {'Content-Type': 'application/json', },
      data: patchedAssetModel
    },
      options);
    }
  
/**
 * Fetch information about asset models.
 */
export const assetModelsDestroy = (
    slug: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/api/v1/asset-models/${slug}/`, method: 'delete'
    },
      options);
    }
  
/**
 * Fetch information about assets.
 */
export const assetsList = (
    params?: AssetsListParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PaginatedAssetWithNodeList>(
      {url: `/api/v1/assets/`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Fetch information about assets.
 */
export const assetsRetrieve = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AssetWithNode>(
      {url: `/api/v1/assets/${id}/`, method: 'get'
    },
      options);
    }
  
/**
 * Takes a set of user credentials and returns an access and refresh JSON web
token pair to prove the authentication of those credentials.
 */
export const authTokenCreate = (
    tokenObtainPair: BodyType<NonReadonly<TokenObtainPair>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<TokenObtainPair>(
      {url: `/api/v1/auth/token/`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: tokenObtainPair
    },
      options);
    }
  
/**
 * Takes a refresh type JSON web token and returns an access type JSON web
token if the refresh token is valid.
 */
export const authTokenRefreshCreate = (
    tokenRefresh: BodyType<NonReadonly<TokenRefresh>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<TokenRefresh>(
      {url: `/api/v1/auth/token/refresh/`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: tokenRefresh
    },
      options);
    }
  
/**
 * Takes a token and indicates if it is valid.  This view provides no
information about a token's fitness for a particular use.
 */
export const authTokenVerifyCreate = (
    tokenVerify: BodyType<TokenVerify>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<TokenVerify>(
      {url: `/api/v1/auth/token/verify/`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: tokenVerify
    },
      options);
    }
  
/**
 * Fetch information about asset events.
 */
export const changesetsList = (
    params?: ChangesetsListParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PaginatedChangeSetSerializerWithCountList>(
      {url: `/api/v1/changesets/`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Fetch information about asset events.
 */
export const changesetsRetrieve = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ChangeSetSerializerWithCount>(
      {url: `/api/v1/changesets/${id}/`, method: 'get'
    },
      options);
    }
  
/**
 * Get the events in the changeset.
 */
export const changesetsEventsRetrieve = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ChangeSetSerializerWithCount>(
      {url: `/api/v1/changesets/${id}/events/`, method: 'get'
    },
      options);
    }
  
/**
 * Fetch information about manufacturers.
 */
export const manufacturersList = (
    params?: ManufacturersListParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PaginatedManufacturerList>(
      {url: `/api/v1/manufacturers/`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Fetch information about manufacturers.
 */
export const manufacturersCreate = (
    manufacturer: BodyType<NonReadonly<Manufacturer>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Manufacturer>(
      {url: `/api/v1/manufacturers/`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: manufacturer
    },
      options);
    }
  
/**
 * Fetch information about manufacturers.
 */
export const manufacturersRetrieve = (
    slug: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Manufacturer>(
      {url: `/api/v1/manufacturers/${slug}/`, method: 'get'
    },
      options);
    }
  
/**
 * Fetch information about manufacturers.
 */
export const manufacturersUpdate = (
    slug: string,
    manufacturer: BodyType<NonReadonly<Manufacturer>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Manufacturer>(
      {url: `/api/v1/manufacturers/${slug}/`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: manufacturer
    },
      options);
    }
  
/**
 * Fetch information about manufacturers.
 */
export const manufacturersPartialUpdate = (
    slug: string,
    patchedManufacturer: BodyType<NonReadonly<PatchedManufacturer>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Manufacturer>(
      {url: `/api/v1/manufacturers/${slug}/`, method: 'patch',
      headers: {'Content-Type': 'application/json', },
      data: patchedManufacturer
    },
      options);
    }
  
/**
 * Fetch information about manufacturers.
 */
export const manufacturersDestroy = (
    slug: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/api/v1/manufacturers/${slug}/`, method: 'delete'
    },
      options);
    }
  
/**
 * Fetch information about nodes.
 */
export const nodesList = (
    params?: NodesListParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PaginatedNodeList>(
      {url: `/api/v1/nodes/`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Fetch information about nodes.
 */
export const nodesRetrieve = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Node>(
      {url: `/api/v1/nodes/${id}/`, method: 'get'
    },
      options);
    }
  
/**
 * Fetch information about nodes.
 */
export const nodesUpdate = (
    id: string,
    node: BodyType<NonReadonly<Node>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Node>(
      {url: `/api/v1/nodes/${id}/`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: node
    },
      options);
    }
  
/**
 * Fetch information about nodes.
 */
export const nodesPartialUpdate = (
    id: string,
    patchedNode: BodyType<NonReadonly<PatchedNode>>,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Node>(
      {url: `/api/v1/nodes/${id}/`, method: 'patch',
      headers: {'Content-Type': 'application/json', },
      data: patchedNode
    },
      options);
    }
  
export type AccountsProfileRetrieveResult = NonNullable<Awaited<ReturnType<typeof accountsProfileRetrieve>>>
export type AccountsProfileUpdateResult = NonNullable<Awaited<ReturnType<typeof accountsProfileUpdate>>>
export type AccountsProfilePartialUpdateResult = NonNullable<Awaited<ReturnType<typeof accountsProfilePartialUpdate>>>
export type AssetEventsListResult = NonNullable<Awaited<ReturnType<typeof assetEventsList>>>
export type AssetEventsRetrieveResult = NonNullable<Awaited<ReturnType<typeof assetEventsRetrieve>>>
export type AssetModelsListResult = NonNullable<Awaited<ReturnType<typeof assetModelsList>>>
export type AssetModelsCreateResult = NonNullable<Awaited<ReturnType<typeof assetModelsCreate>>>
export type AssetModelsRetrieveResult = NonNullable<Awaited<ReturnType<typeof assetModelsRetrieve>>>
export type AssetModelsUpdateResult = NonNullable<Awaited<ReturnType<typeof assetModelsUpdate>>>
export type AssetModelsPartialUpdateResult = NonNullable<Awaited<ReturnType<typeof assetModelsPartialUpdate>>>
export type AssetModelsDestroyResult = NonNullable<Awaited<ReturnType<typeof assetModelsDestroy>>>
export type AssetsListResult = NonNullable<Awaited<ReturnType<typeof assetsList>>>
export type AssetsRetrieveResult = NonNullable<Awaited<ReturnType<typeof assetsRetrieve>>>
export type AuthTokenCreateResult = NonNullable<Awaited<ReturnType<typeof authTokenCreate>>>
export type AuthTokenRefreshCreateResult = NonNullable<Awaited<ReturnType<typeof authTokenRefreshCreate>>>
export type AuthTokenVerifyCreateResult = NonNullable<Awaited<ReturnType<typeof authTokenVerifyCreate>>>
export type ChangesetsListResult = NonNullable<Awaited<ReturnType<typeof changesetsList>>>
export type ChangesetsRetrieveResult = NonNullable<Awaited<ReturnType<typeof changesetsRetrieve>>>
export type ChangesetsEventsRetrieveResult = NonNullable<Awaited<ReturnType<typeof changesetsEventsRetrieve>>>
export type ManufacturersListResult = NonNullable<Awaited<ReturnType<typeof manufacturersList>>>
export type ManufacturersCreateResult = NonNullable<Awaited<ReturnType<typeof manufacturersCreate>>>
export type ManufacturersRetrieveResult = NonNullable<Awaited<ReturnType<typeof manufacturersRetrieve>>>
export type ManufacturersUpdateResult = NonNullable<Awaited<ReturnType<typeof manufacturersUpdate>>>
export type ManufacturersPartialUpdateResult = NonNullable<Awaited<ReturnType<typeof manufacturersPartialUpdate>>>
export type ManufacturersDestroyResult = NonNullable<Awaited<ReturnType<typeof manufacturersDestroy>>>
export type NodesListResult = NonNullable<Awaited<ReturnType<typeof nodesList>>>
export type NodesRetrieveResult = NonNullable<Awaited<ReturnType<typeof nodesRetrieve>>>
export type NodesUpdateResult = NonNullable<Awaited<ReturnType<typeof nodesUpdate>>>
export type NodesPartialUpdateResult = NonNullable<Awaited<ReturnType<typeof nodesPartialUpdate>>>
